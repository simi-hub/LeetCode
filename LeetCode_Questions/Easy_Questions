QUESTION 1 - TWO_SUMS METHOD , ANSWER LOCATION: PACKAGE - (EASY), CLASS - (LEET_EASY)
Given an array of integers nums and an integer target,
return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

QUESTION 2 - PALINDROME NUMBERS, ANSWER LOCATION: PACKAGE - (EASY), CLASS - (LEET_EASY)
Given an integer x, return true if x is palindrome integer.
An integer is a palindrome when it reads the same backward as forward.

QUESTION 3 - BUILD ARRAY METHOD, ANSWER LOCATION: PACKAGE - (EASY), CLASS - (LEET_EASY)
Given a zero-based permutation nums (0-indexed), build an array ans of the same length,
where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.
A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

QUESTION 4 - ROMAN NUMERALS, ANSWER LOCATION: PACKAGE - (EASY), CLASS - (LEET_EASY)
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII,
which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.
Roman numerals are usually written largest to smallest from left to right.
However, the numeral for four is not IIII. Instead, the number four is written as IV.
Because the one is before the five we subtract it making four. The same principle applies to the number nine,
which is written as IX. There are six instances where subtraction is used:
I can be placed before V (5) and X (10) to make 4 and 9.
X can be placed before L (50) and C (100) to make 40 and 90.
C can be placed before D (500) and M (1000) to make 400 and 900.
*Given a roman numeral, convert it to an integer*

QUESTION 5 - CONCATENATION OF ARRAY,ANSWER LOCATION: PACKAGE - (EASY), CLASS - (LEET_EASY)
Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i]
and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).Specifically, ans is the concatenation of two nums arrays.
Return the array ans.

QUESTION 6 - LONGEST COMMON PREFIX, ANSWER LOCATION: PACKAGE - (EASY), CLASS - (LEET_EASY)
Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string "".

QUESTION 7 - VALID PARENTHESES, ANSWER LOCATION: PACKAGE - (EASY), CLASS - (LEET_EASY)
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.

QUESTION 8 - MERGE TWO SORTED LIST, ANSWER LOCATION: PACKAGE - (EASY), CLASS - (LIST_NODE)
You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

QUESTION 9 - Remove element, PACKAGE - (EASY), CLASS - (LEET_EASY)
Given an integer array nums and an integer val, remove all occurrences of val in nums in-place.
The relative order of the elements may be changed.
Since it is impossible to change the length of the array in some languages,
you must instead have the result be placed in the first part of the array nums. More formally,
if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result.
It does not matter what you leave beyond the first k elements.
Return k after placing the final result in the first k slots of nums.
Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra
memory.

QUESTION 10 - Implement strStr() , PACKAGE - (EASY), CLASS - (LEET_EASY)
Given two strings needle and haystack,
return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack